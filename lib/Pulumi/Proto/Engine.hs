{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Pulumi.Proto.Engine where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Pulumi.Proto.Empty
 
data Engine request response = Engine{engineLog ::
                                      request 'HsGRPC.Normal Pulumi.Proto.Engine.LogRequest
                                        Pulumi.Proto.Empty.Empty
                                        ->
                                        Hs.IO (response 'HsGRPC.Normal Pulumi.Proto.Empty.Empty),
                                      engineGetRootResource ::
                                      request 'HsGRPC.Normal Pulumi.Proto.Engine.GetRootResourceRequest
                                        Pulumi.Proto.Engine.GetRootResourceResponse
                                        ->
                                        Hs.IO
                                          (response 'HsGRPC.Normal Pulumi.Proto.Engine.GetRootResourceResponse),
                                      engineSetRootResource ::
                                      request 'HsGRPC.Normal Pulumi.Proto.Engine.SetRootResourceRequest
                                        Pulumi.Proto.Engine.SetRootResourceResponse
                                        ->
                                        Hs.IO
                                          (response 'HsGRPC.Normal Pulumi.Proto.Engine.SetRootResourceResponse)}
                             deriving Hs.Generic
 
engineServer ::
               Engine HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                 HsGRPC.ServiceOptions -> Hs.IO ()
engineServer
  Engine{engineLog = engineLog,
         engineGetRootResource = engineGetRootResource,
         engineSetRootResource = engineSetRootResource}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler (HsGRPC.MethodName "/pulumirpc.Engine/Log")
                                   (HsGRPC.convertGeneratedServerHandler engineLog)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/pulumirpc.Engine/GetRootResource")
                                   (HsGRPC.convertGeneratedServerHandler engineGetRootResource)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/pulumirpc.Engine/SetRootResource")
                                   (HsGRPC.convertGeneratedServerHandler engineSetRootResource))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength})
 
engineClient ::
               HsGRPC.Client ->
                 Hs.IO (Engine HsGRPC.ClientRequest HsGRPC.ClientResult)
engineClient client
  = (Hs.pure Engine) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/pulumirpc.Engine/Log")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/pulumirpc.Engine/GetRootResource")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/pulumirpc.Engine/SetRootResource")))
 
data LogSeverity = LogSeverityDEBUG
                 | LogSeverityINFO
                 | LogSeverityWARNING
                 | LogSeverityERROR
                 deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogSeverity where
        nameOf _ = (Hs.fromString "LogSeverity")
 
instance HsProtobuf.HasDefault LogSeverity
 
instance Hs.Bounded LogSeverity where
        minBound = LogSeverityDEBUG
        maxBound = LogSeverityERROR
 
instance Hs.Ord LogSeverity where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum LogSeverity where
        toProtoEnumMay 0 = Hs.Just LogSeverityDEBUG
        toProtoEnumMay 1 = Hs.Just LogSeverityINFO
        toProtoEnumMay 2 = Hs.Just LogSeverityWARNING
        toProtoEnumMay 3 = Hs.Just LogSeverityERROR
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (LogSeverityDEBUG) = 0
        fromProtoEnum (LogSeverityINFO) = 1
        fromProtoEnum (LogSeverityWARNING) = 2
        fromProtoEnum (LogSeverityERROR) = 3
 
instance HsJSONPB.ToJSONPB LogSeverity where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB LogSeverity where
        parseJSONPB (HsJSONPB.String "DEBUG") = Hs.pure LogSeverityDEBUG
        parseJSONPB (HsJSONPB.String "INFO") = Hs.pure LogSeverityINFO
        parseJSONPB (HsJSONPB.String "WARNING")
          = Hs.pure LogSeverityWARNING
        parseJSONPB (HsJSONPB.String "ERROR") = Hs.pure LogSeverityERROR
        parseJSONPB v = (HsJSONPB.typeMismatch "LogSeverity" v)
 
instance HsJSONPB.ToJSON LogSeverity where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogSeverity where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite LogSeverity
 
data LogRequest = LogRequest{logRequestSeverity ::
                             HsProtobuf.Enumerated Pulumi.Proto.Engine.LogSeverity,
                             logRequestMessage :: Hs.Text, logRequestUrn :: Hs.Text,
                             logRequestStreamId :: Hs.Int32, logRequestEphemeral :: Hs.Bool}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogRequest where
        nameOf _ = (Hs.fromString "LogRequest")
 
instance HsProtobuf.HasDefault LogRequest
 
instance HsProtobuf.Message LogRequest where
        encodeMessage _
          LogRequest{logRequestSeverity = logRequestSeverity,
                     logRequestMessage = logRequestMessage,
                     logRequestUrn = logRequestUrn,
                     logRequestStreamId = logRequestStreamId,
                     logRequestEphemeral = logRequestEphemeral}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   logRequestSeverity),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   logRequestMessage),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   logRequestUrn),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   logRequestStreamId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   logRequestEphemeral)])
        decodeMessage _
          = (Hs.pure LogRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "LogSeverity")))
                (HsProtobuf.Single "severity")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "message")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "urn")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "streamId")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "ephemeral")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LogRequest where
        toJSONPB (LogRequest f1 f2 f3 f4 f5)
          = (HsJSONPB.object
               ["severity" .= f1, "message" .= f2, "urn" .= f3, "streamId" .= f4,
                "ephemeral" .= f5])
        toEncodingPB (LogRequest f1 f2 f3 f4 f5)
          = (HsJSONPB.pairs
               ["severity" .= f1, "message" .= f2, "urn" .= f3, "streamId" .= f4,
                "ephemeral" .= f5])
 
instance HsJSONPB.FromJSONPB LogRequest where
        parseJSONPB
          = (HsJSONPB.withObject "LogRequest"
               (\ obj ->
                  (Hs.pure LogRequest) <*> obj .: "severity" <*> obj .: "message" <*>
                    obj .: "urn"
                    <*> obj .: "streamId"
                    <*> obj .: "ephemeral"))
 
instance HsJSONPB.ToJSON LogRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogRequest where
        declareNamedSchema _
          = do let declare_severity = HsJSONPB.declareSchemaRef
               logRequestSeverity <- declare_severity Proxy.Proxy
               let declare_message = HsJSONPB.declareSchemaRef
               logRequestMessage <- declare_message Proxy.Proxy
               let declare_urn = HsJSONPB.declareSchemaRef
               logRequestUrn <- declare_urn Proxy.Proxy
               let declare_streamId = HsJSONPB.declareSchemaRef
               logRequestStreamId <- declare_streamId Proxy.Proxy
               let declare_ephemeral = HsJSONPB.declareSchemaRef
               logRequestEphemeral <- declare_ephemeral Proxy.Proxy
               let _ = Hs.pure LogRequest <*> HsJSONPB.asProxy declare_severity
                         <*> HsJSONPB.asProxy declare_message
                         <*> HsJSONPB.asProxy declare_urn
                         <*> HsJSONPB.asProxy declare_streamId
                         <*> HsJSONPB.asProxy declare_ephemeral
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("severity", logRequestSeverity),
                                                        ("message", logRequestMessage),
                                                        ("urn", logRequestUrn),
                                                        ("streamId", logRequestStreamId),
                                                        ("ephemeral", logRequestEphemeral)]}})
 
data GetRootResourceRequest = GetRootResourceRequest{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetRootResourceRequest where
        nameOf _ = (Hs.fromString "GetRootResourceRequest")
 
instance HsProtobuf.HasDefault GetRootResourceRequest
 
instance HsProtobuf.Message GetRootResourceRequest where
        encodeMessage _ GetRootResourceRequest{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure GetRootResourceRequest)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB GetRootResourceRequest where
        toJSONPB (GetRootResourceRequest) = (HsJSONPB.object [])
        toEncodingPB (GetRootResourceRequest) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB GetRootResourceRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetRootResourceRequest"
               (\ obj -> (Hs.pure GetRootResourceRequest)))
 
instance HsJSONPB.ToJSON GetRootResourceRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetRootResourceRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetRootResourceRequest where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetRootResourceRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype GetRootResourceResponse = GetRootResourceResponse{getRootResourceResponseUrn
                                                          :: Hs.Text}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetRootResourceResponse where
        nameOf _ = (Hs.fromString "GetRootResourceResponse")
 
instance HsProtobuf.HasDefault GetRootResourceResponse
 
instance HsProtobuf.Message GetRootResourceResponse where
        encodeMessage _
          GetRootResourceResponse{getRootResourceResponseUrn =
                                    getRootResourceResponseUrn}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getRootResourceResponseUrn)])
        decodeMessage _
          = (Hs.pure GetRootResourceResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "urn")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetRootResourceResponse where
        toJSONPB (GetRootResourceResponse f1)
          = (HsJSONPB.object ["urn" .= f1])
        toEncodingPB (GetRootResourceResponse f1)
          = (HsJSONPB.pairs ["urn" .= f1])
 
instance HsJSONPB.FromJSONPB GetRootResourceResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetRootResourceResponse"
               (\ obj -> (Hs.pure GetRootResourceResponse) <*> obj .: "urn"))
 
instance HsJSONPB.ToJSON GetRootResourceResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetRootResourceResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetRootResourceResponse where
        declareNamedSchema _
          = do let declare_urn = HsJSONPB.declareSchemaRef
               getRootResourceResponseUrn <- declare_urn Proxy.Proxy
               let _ = Hs.pure GetRootResourceResponse <*>
                         HsJSONPB.asProxy declare_urn
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetRootResourceResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("urn", getRootResourceResponseUrn)]}})
 
newtype SetRootResourceRequest = SetRootResourceRequest{setRootResourceRequestUrn
                                                        :: Hs.Text}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SetRootResourceRequest where
        nameOf _ = (Hs.fromString "SetRootResourceRequest")
 
instance HsProtobuf.HasDefault SetRootResourceRequest
 
instance HsProtobuf.Message SetRootResourceRequest where
        encodeMessage _
          SetRootResourceRequest{setRootResourceRequestUrn =
                                   setRootResourceRequestUrn}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   setRootResourceRequestUrn)])
        decodeMessage _
          = (Hs.pure SetRootResourceRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "urn")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SetRootResourceRequest where
        toJSONPB (SetRootResourceRequest f1)
          = (HsJSONPB.object ["urn" .= f1])
        toEncodingPB (SetRootResourceRequest f1)
          = (HsJSONPB.pairs ["urn" .= f1])
 
instance HsJSONPB.FromJSONPB SetRootResourceRequest where
        parseJSONPB
          = (HsJSONPB.withObject "SetRootResourceRequest"
               (\ obj -> (Hs.pure SetRootResourceRequest) <*> obj .: "urn"))
 
instance HsJSONPB.ToJSON SetRootResourceRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SetRootResourceRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SetRootResourceRequest where
        declareNamedSchema _
          = do let declare_urn = HsJSONPB.declareSchemaRef
               setRootResourceRequestUrn <- declare_urn Proxy.Proxy
               let _ = Hs.pure SetRootResourceRequest <*>
                         HsJSONPB.asProxy declare_urn
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SetRootResourceRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("urn", setRootResourceRequestUrn)]}})
 
data SetRootResourceResponse = SetRootResourceResponse{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SetRootResourceResponse where
        nameOf _ = (Hs.fromString "SetRootResourceResponse")
 
instance HsProtobuf.HasDefault SetRootResourceResponse
 
instance HsProtobuf.Message SetRootResourceResponse where
        encodeMessage _ SetRootResourceResponse{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure SetRootResourceResponse)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB SetRootResourceResponse where
        toJSONPB (SetRootResourceResponse) = (HsJSONPB.object [])
        toEncodingPB (SetRootResourceResponse) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB SetRootResourceResponse where
        parseJSONPB
          = (HsJSONPB.withObject "SetRootResourceResponse"
               (\ obj -> (Hs.pure SetRootResourceResponse)))
 
instance HsJSONPB.ToJSON SetRootResourceResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SetRootResourceResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SetRootResourceResponse where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SetRootResourceResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
